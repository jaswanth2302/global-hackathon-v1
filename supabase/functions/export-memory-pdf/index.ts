import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { memoryId } = await req.json()

    // Initialize Supabase client
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization')! },
        },
      }
    )

    // Get memory data
    const { data: memory, error: memoryError } = await supabaseClient
      .from('memories')
      .select('*')
      .eq('id', memoryId)
      .single()

    if (memoryError) throw memoryError

    // Get user info
    const { data: user } = await supabaseClient.auth.getUser()
    if (!user.user) throw new Error('User not authenticated')

    // Create PDF content
    const pdfContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>${memory.title}</title>
        <style>
          body {
            font-family: 'Georgia', serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 40px 20px;
            background: #fff;
          }
          h1 {
            color: #8B4513;
            border-bottom: 3px solid #8B4513;
            padding-bottom: 10px;
            margin-bottom: 30px;
          }
          h2 {
            color: #A0522D;
            margin-top: 30px;
            margin-bottom: 15px;
          }
          p {
            margin-bottom: 15px;
            text-align: justify;
          }
          .metadata {
            background: #f5f5f5;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
            font-size: 14px;
            color: #666;
          }
          .tags {
            margin-top: 20px;
          }
          .tag {
            display: inline-block;
            background: #8B4513;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            margin-right: 5px;
            margin-bottom: 5px;
          }
          .footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #ddd;
            text-align: center;
            color: #666;
            font-size: 12px;
          }
        </style>
      </head>
      <body>
        <h1>${memory.title}</h1>
        
        <div class="metadata">
          <p><strong>Created:</strong> ${new Date(memory.created_at).toLocaleDateString()}</p>
          <p><strong>Summary:</strong> ${memory.summary}</p>
          ${memory.tags && memory.tags.length > 0 ? `
            <div class="tags">
              <strong>Tags:</strong><br>
              ${memory.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
            </div>
          ` : ''}
        </div>
        
        <div class="content">
          ${memory.content}
        </div>
        
        <div class="footer">
          <p>Generated by Memory Keeper - Preserving precious family memories</p>
          <p>Created on ${new Date().toLocaleDateString()}</p>
        </div>
      </body>
      </html>
    `

    // For now, return the HTML content
    // In a real implementation, you would use a PDF generation library
    return new Response(pdfContent, {
      headers: { 
        ...corsHeaders, 
        'Content-Type': 'text/html',
        'Content-Disposition': `attachment; filename="${memory.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.html"`
      },
      status: 200,
    })

  } catch (error) {
    console.error('Error exporting PDF:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      }
    )
  }
})
